<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ckardaris.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ckardaris.github.io/" rel="alternate" type="text/html" /><updated>2024-05-19T19:11:40+00:00</updated><id>https://ckardaris.github.io/feed.xml</id><title type="html">Charalampos Kardaris</title><entry><title type="html">Finding the Optional Truth</title><link href="https://ckardaris.github.io/blog/2024/05/16/finding-the-optional-truth.html" rel="alternate" type="text/html" title="Finding the Optional Truth" /><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><id>https://ckardaris.github.io/blog/2024/05/16/finding-the-optional-truth</id><content type="html" xml:base="https://ckardaris.github.io/blog/2024/05/16/finding-the-optional-truth.html"><![CDATA[<p>Using a programming language <em>can</em> be an easy task<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Understanding it deeply
and mastering it, though, is more challenging. Multiple definitions of the word
apply here: <em>demanding</em> and <em>stimulating</em>.</p>

<p>I have been trying to utilize all available features of C++ as much as possible.
One that I particularly like is <code class="language-plaintext highlighter-rouge">std::optional</code><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. I am fond of its semantics.
Here is something that may contain a value, or it may as well contain nothing.
This <em>nothing</em> is also known as <code class="language-plaintext highlighter-rouge">std::nullopt</code>. <code class="language-plaintext highlighter-rouge">std::optional</code> removes the need
of returning raw pointers and relying on comparisons with <code class="language-plaintext highlighter-rouge">nullptr</code> in order to
check if the return value of a function is valid or not.</p>

<p>I must say I have not been using <code class="language-plaintext highlighter-rouge">std::optional</code> extensively, so I am yet to
discover all its edges. But recently, I had to interact with it a little more
and learned something along the way.</p>

<h2 id="the-pseudocode">The Pseudocode</h2>

<p>Let’s start by writing a small example to describe my thought process.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ParseMessage</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">myMsg</span> <span class="o">=</span> <span class="n">ParseMessage</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The most explicit way to print the above message is:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">myMsg</span><span class="p">.</span><span class="n">has_value</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">myMsg</span><span class="p">.</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Of course, in this small example, we could have skipped the check. But in the
real world, we always have to ensure that the value is there. Otherwise, an
exception – when using <code class="language-plaintext highlighter-rouge">.value()</code> – or undefined behavior – when directly
dereferencing the <code class="language-plaintext highlighter-rouge">std::optional</code> – is on the table.</p>

<p>Knowing all these, I filled my code with <code class="language-plaintext highlighter-rouge">.has_value()</code> and <code class="language-plaintext highlighter-rouge">.value()</code> calls. I
knew it was correct, but it was also quite cumbersome. There must have been an
easier way to write this.</p>

<p>Looking online, I saw some examples that were doing something akin to:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">myMsg</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">myMsg</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is what I was looking for. Not only is this a lot simpler to write, but it
permits you to reuse old code that uses the <em>nullptr-for-no-value</em> pattern,
just by changing the type from <code class="language-plaintext highlighter-rouge">T*</code> to <code class="language-plaintext highlighter-rouge">std::optional&lt;T&gt;</code> in the code.</p>

<p>Equipped with my newly found knowledge, I removed all calls to <code class="language-plaintext highlighter-rouge">has_value()</code> and
replaced all calls to <code class="language-plaintext highlighter-rouge">value()</code> with direct dereferencing using <code class="language-plaintext highlighter-rouge">operator*</code>.</p>

<h2 id="the-surprise">The Surprise</h2>

<p>Unfortunately, I was greeted with a compiler error.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: cannot convert 'std::optional&lt;T&gt;' to 'bool'
</code></pre></div></div>

<p>The code in question was trying to do something like the following:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">Check</span><span class="p">(</span><span class="kt">bool</span> <span class="n">value</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">Run</span><span class="p">()</span>
<span class="p">{</span>
    <span class="p">...</span>
    <span class="n">Check</span><span class="p">(</span><span class="n">myOptionalValue</span><span class="p">);</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The message was clear. But why did it not work? Converting to a
<code class="language-plaintext highlighter-rouge">bool</code> in the condition of the <code class="language-plaintext highlighter-rouge">if</code> statement is certainly possible.</p>

<h2 id="the-truth">The Truth</h2>

<p>It turns out – as always – this is all by design. To answer my questions, I
had to read the available specification on <em>cppreference.com</em> a little more
carefully.</p>

<blockquote>
  <p>When an object of type optional&lt;T&gt; is <strong>contextually converted to bool</strong> <sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>,
the conversion returns true if the object contains a value and false if it
does not contain a value.</p>
</blockquote>

<p>I was not sure what <strong>“contextually”</strong> meant, so I followed the link, and
I was presented with the following introductory text.</p>

<blockquote>
  <p><strong>Implicit conversions</strong> are performed whenever an expression of some type T1 is used in context that does not accept that type, but accepts some other type T2; in particular:</p>
  <ul>
    <li>when the expression is used as the <strong>argument</strong> when calling a function that is declared with T2 as parameter;</li>
    <li>when the expression is used as an <strong>operand</strong> with an operator that expects T2;</li>
    <li>when <strong>initializing</strong> a new object of type T2, including return statement in a function returning T2;</li>
    <li>when the expression is used in a <strong>switch</strong> statement (T2 is integral type);</li>
    <li>when the expression is used in an <strong>if</strong> statement or a <strong>loop</strong> (T2 is bool).</li>
  </ul>
</blockquote>

<p>It seemed to explain my situation. The last bullet must be what permits the
usage of <code class="language-plaintext highlighter-rouge">std::optional</code> in <code class="language-plaintext highlighter-rouge">if</code> statements.</p>

<p>But wait a minute.</p>

<p>The first bullet should cover the function parameter scenario, too. Obviously,
this was not the case. I was missing something.</p>

<p>The magic word is <strong>“implicit”</strong>.</p>

<p>The <code class="language-plaintext highlighter-rouge">std::optional</code> class defines the following conversion function to
<code class="language-plaintext highlighter-rouge">bool</code>:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constexpr</span> <span class="k">explicit</span> <span class="k">operator</span> <span class="kt">bool</span><span class="p">()</span> <span class="k">const</span> <span class="k">noexcept</span>
</code></pre></div></div>

<p>It is clearly marked as <code class="language-plaintext highlighter-rouge">explicit</code>, so implicit conversions do not consider it.</p>

<p>I thought to myself:</p>

<blockquote>
  <p>How, then, does the conversion to ‘bool’ take place in the ‘if’ condition?</p>
</blockquote>

<p>I had to keep reading. Further below was the answer to my question about the
meaning of <strong>“contextually”</strong>.</p>

<blockquote>
  <p><strong>Contextual conversions</strong></p>

  <p>In the following contexts, the type ‘bool’ is expected and the implicit
conversion is performed if the declaration ‘bool t(e)’ is well-formed (that is,
an explicit conversion function such as ‘explicit T::operator bool() const’ is
considered). Such expression ‘e’ is said to be <strong>contextually converted to
bool</strong>.</p>

  <p>Since C++11:</p>
  <ul>
    <li>the controlling expression of <strong>if</strong>, <strong>while</strong>, <strong>for</strong></li>
    <li>the operands of the built-in logical operators <strong>!</strong>, <strong>&amp;&amp;</strong> and <strong>||</strong></li>
    <li>the first operand of the conditional operator <strong>?:</strong></li>
    <li>the predicate in a <strong>static_assert</strong> declaration</li>
    <li>the expression in a <strong>noexcept</strong> specifier</li>
  </ul>

  <p>Since C++20:</p>
  <ul>
    <li>the expression in an <strong>explicit</strong> specifier</li>
  </ul>
</blockquote>

<p>It turns out that, when a boolean expression is required for defining a
condition – one would say, in a <em>conditional context</em> –, explicit conversion
functions to <code class="language-plaintext highlighter-rouge">bool</code> are considered as well.</p>

<h2 id="the-lesson">The Lesson</h2>

<p>I don’t want to focus on the minefield that is modern C++ syntax and rules.
People smarter and more knowledgeable than me have expressed, and will continue
to express, their opinions on the language. All I want to say is that, as a
deeply inquiring mind, I was quite fascinated to discover this little sub-rule,
which ultimately expanded my knowledge.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Depending on which one you pick, of course. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>See <a href="https://en.cppreference.com/w/cpp/utility/optional">cppreference.com/…/optional</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>See <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">cppreference.com/…/language/implicit_conversion</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="blog" /><category term="c++" /><category term="std::optional" /><summary type="html"><![CDATA[Using a programming language can be an easy task1. Understanding it deeply and mastering it, though, is more challenging. Multiple definitions of the word apply here: demanding and stimulating. Depending on which one you pick, of course. &#8617;]]></summary></entry><entry><title type="html">ChatGPT and the Web Ignorant</title><link href="https://ckardaris.github.io/blog/2024/05/09/chatgpt-and-the-web-ignorant.html" rel="alternate" type="text/html" title="ChatGPT and the Web Ignorant" /><published>2024-05-09T00:00:00+00:00</published><updated>2024-05-09T00:00:00+00:00</updated><id>https://ckardaris.github.io/blog/2024/05/09/chatgpt-and-the-web-ignorant</id><content type="html" xml:base="https://ckardaris.github.io/blog/2024/05/09/chatgpt-and-the-web-ignorant.html"><![CDATA[<p>The first time I used ChatGPT I was astounded. Here was something that felt like
magic. Since then, a lot more information has been made available about LLMs in
general. Us laymen have peeked inside the magician’s hat. We know more about
their capabilities and shortcomings. We know that they can hallucinate at times
and that their output should be used with care. But the point still remains;
what ChatGPT and the rest of the LLMs offer is awesome.</p>

<p>I mostly use ChatGPT for my programming tasks. While learning new concepts, it
has mostly replaced searching the web for me. I prefer its clean interface: a
question followed by an answer. Most times the answer is on point, something you
don’t get out of a traditional search engine these days. The top-ranked
SEO-heavy posts create an additional burden on me to filter them, which is not
always an easy task, or a worthwhile one. For specific technical matters, I
still prefer to directly visit the reference or documentation websites<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<p>I first set up this personal website two years ago. I realised that GitHub
pages would be a simple way to go about it. I set up Jekyll and started
tinkering with a theme<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. Initially hesitant to begin posting, I uploaded
some of my photography and left it at that.</p>

<p>About two weeks ago, I decided that I wanted to bring some life back into it. I
set up my local environment again and started improving the website, bit by bit.
I introduced post tags and tag pages<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>. I uploaded my first
<a href="/blog/2024/05/04/see-you-at-the-library.html">post</a>.</p>

<p>One thing remained and I would be set: a better gallery view for my
<a href="/photography">photos</a>. From the first moment, I wanted to have a grid view.
However, I am not very proficient in CSS and, at the time, I could not make it
work as I wanted. I put my photos in a single column and called it a day.</p>

<p><img src="/assets/images/2024-05-06-chatgpt-stories-helping-a-ruby-ignorant-0.png" alt="Single column photo
gallery" /></p>

<p>Enter ChatGPT.</p>

<blockquote>
  <p>I want to put photos in a three column grid. When the screen size reduces, I
want it to be responsive. What is the proper way to do it?</p>
</blockquote>

<p>ChatGPT replied.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-item"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"photo1.jpg"</span> <span class="na">alt=</span><span class="s">"Photo 1"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-item"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"photo2.jpg"</span> <span class="na">alt=</span><span class="s">"Photo 2"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-item"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"photo3.jpg"</span> <span class="na">alt=</span><span class="s">"Photo 3"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="c">&lt;!-- Add more grid items as needed --&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>and</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.grid-container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="nb">repeat</span><span class="p">(</span><span class="n">auto-fit</span><span class="p">,</span> <span class="n">minmax</span><span class="p">(</span><span class="m">300px</span><span class="p">,</span> <span class="m">1</span><span class="n">fr</span><span class="p">));</span>
  <span class="py">grid-gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.grid-item</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>It worked on the first try. I took it from there. I knew how to proceed. I
adjusted my Jekyll templates accordingly and changed the <code class="language-plaintext highlighter-rouge">minmax</code> value, in
order to fit three photos in the widest layout. I finally had a nicely looking
photo gallery. I even added captions to all the photos. Cool!</p>

<p><img src="/assets/images/2024-05-06-chatgpt-stories-helping-a-ruby-ignorant-1.png" alt="Grid gallery" /></p>

<p>Initially, by clicking on each photo, the original full-size photo was shown. I
thought that this was not very optimal, since a lot of network data needed to be
transferred. Most of my photos are taken with my Nikon D3400 DSLR camera and
their size can be up to 20MB. The solution would be to show some smaller version
of each photo initially, and only display the full-size version after a second
click.</p>

<p>I thought to myself, “I want each photo to have its own page. How do I do
that?”. I knew that it was possible to do it. My tags plugin is generating
pages for all post tags.</p>

<p>Enter ChatGPT. Again.</p>

<blockquote>
  <p>Let’s say I have a list of photos in a Jekyll website as a data file. I want
to create a page for each photo, where you can see the photo and links to the
previous and next photo will navigate you along the list.</p>
</blockquote>

<p>ChatGPT produced some valid HTML that I could work with, but the rest of the
code was not up to the task. It did not help much with the Jekyll integration
part. After a quick look around the web and the Jekyll documentation, I
understood I needed to write a custom plugin<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">4</a></sup>.</p>

<blockquote>
  <p>Your suggestions so far are not working. I think I need to write a custom
plugin.</p>
</blockquote>

<p>After the usual ChatGPT answer intro, I got the coveted code.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">PhotoPagesGenerator</span> <span class="o">&lt;</span> <span class="no">Generator</span>
    <span class="n">safe</span> <span class="kp">true</span>
    <span class="n">priority</span> <span class="ss">:normal</span>

    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="n">site</span><span class="p">)</span>
      <span class="n">photos</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'photos'</span><span class="p">]</span>
      <span class="n">photos</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
        <span class="n">previous_photo</span> <span class="o">=</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="n">photos</span><span class="p">[</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="p">:</span> <span class="kp">nil</span>
        <span class="n">next_photo</span> <span class="o">=</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">photos</span><span class="p">.</span><span class="nf">size</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">?</span> <span class="n">photos</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="p">:</span> <span class="kp">nil</span>

        <span class="n">site</span><span class="p">.</span><span class="nf">pages</span> <span class="o">&lt;&lt;</span> <span class="n">photoPage</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">photo</span><span class="p">,</span> <span class="n">previous_photo</span><span class="p">,</span> <span class="n">next_photo</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="n">photoPage</span> <span class="o">&lt;</span> <span class="no">Page</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">photo</span><span class="p">,</span> <span class="n">previous_photo</span><span class="p">,</span> <span class="n">next_photo</span><span class="p">)</span>
      <span class="vi">@site</span> <span class="o">=</span> <span class="n">site</span>
      <span class="vi">@base</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">source</span>
      <span class="vi">@dir</span> <span class="o">=</span> <span class="s1">''</span> <span class="c1"># Set the directory where you want the pages to be generated</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'url'</span><span class="p">]</span> <span class="c1"># Use the photo URL as the page name</span>

      <span class="nb">self</span><span class="p">.</span><span class="nf">process</span><span class="p">(</span><span class="vi">@name</span><span class="p">)</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">'layout'</span> <span class="o">=&gt;</span> <span class="s1">'photo_page'</span><span class="p">,</span>
        <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'caption'</span><span class="p">],</span>
        <span class="s1">'photo'</span> <span class="o">=&gt;</span> <span class="n">photo</span><span class="p">,</span>
        <span class="s1">'previous_photo'</span> <span class="o">=&gt;</span> <span class="n">previous_photo</span><span class="p">,</span>
        <span class="s1">'next_photo'</span> <span class="o">=&gt;</span> <span class="n">next_photo</span>
      <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Voila! Once more, I made the necessary edits. I introduced wrapping around after
reaching the end of the photo list, simplified the code, based on the official
Jekyll documentation for generators, and set the correct path for the photos to
be shown.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">PhotoPagesGenerator</span> <span class="o">&lt;</span> <span class="no">Generator</span>
    <span class="n">safe</span> <span class="kp">true</span>
    <span class="n">priority</span> <span class="ss">:normal</span>

    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="n">site</span><span class="p">)</span>
      <span class="n">photos</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'photos'</span><span class="p">]</span>
      <span class="n">photos</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
        <span class="n">previous_photo</span> <span class="o">=</span> <span class="n">photos</span><span class="p">[(</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">photos</span><span class="p">.</span><span class="nf">size</span><span class="p">]</span>
        <span class="n">next_photo</span> <span class="o">=</span> <span class="n">photos</span><span class="p">[(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">photos</span><span class="p">.</span><span class="nf">size</span><span class="p">]</span>

        <span class="n">site</span><span class="p">.</span><span class="nf">pages</span> <span class="o">&lt;&lt;</span> <span class="no">PhotoPage</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">photo</span><span class="p">,</span> <span class="n">previous_photo</span><span class="p">,</span> <span class="n">next_photo</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">PhotoPage</span> <span class="o">&lt;</span> <span class="no">Page</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">photo</span><span class="p">,</span> <span class="n">previous_photo</span><span class="p">,</span> <span class="n">next_photo</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
      <span class="vi">@site</span> <span class="o">=</span> <span class="n">site</span>
      <span class="vi">@base</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">source</span>
      <span class="vi">@dir</span> <span class="o">=</span> <span class="s2">"/photography/"</span> <span class="o">+</span> <span class="n">photo</span><span class="p">[</span><span class="s2">"name"</span><span class="p">]</span>
      <span class="vi">@basename</span> <span class="o">=</span> <span class="s1">'index'</span>
      <span class="vi">@ext</span>      <span class="o">=</span> <span class="s1">'.html'</span>
      <span class="vi">@name</span>     <span class="o">=</span> <span class="s1">'index.html'</span>

      <span class="nb">self</span><span class="p">.</span><span class="nf">process</span><span class="p">(</span><span class="vi">@name</span><span class="p">)</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">'layout'</span> <span class="o">=&gt;</span> <span class="s1">'photo_page'</span><span class="p">,</span>
        <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="n">photo</span><span class="p">[</span><span class="s2">"caption"</span><span class="p">],</span>
        <span class="s1">'photo'</span> <span class="o">=&gt;</span> <span class="n">photo</span><span class="p">,</span>
        <span class="s1">'previous_photo'</span> <span class="o">=&gt;</span> <span class="n">previous_photo</span><span class="p">,</span>
        <span class="s1">'next_photo'</span> <span class="o">=&gt;</span> <span class="n">next_photo</span><span class="p">,</span>
        <span class="s1">'index'</span> <span class="o">=&gt;</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># increment to start from 1,</span>
      <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>I finally had it. I struggled a little more than with the CSS grid code, but I
had it. A page for every one of my photos. Enthusiastically, I uploaded the
changes.</p>

<p><img src="/assets/images/2024-05-06-chatgpt-stories-helping-a-ruby-ignorant-2.png" alt="Photo page" /></p>

<p>I am really satisfied with the outcome. I find it amazing how helpful ChatGPT
can be, if you have a rough idea of what you want to achieve, you know the right
keywords to use in your query and are willing to play a little with the code
afterwards. And, testament to its value, I consider it as a great companion in
my tech endeavours and look forward to further exploring its powers.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>I am programming in C++ at work, so I frequently visit
<a href="https://cppreference.com">cppreference.com</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>This website is based on the <a href="https://github.com/jekyll/minima">minima</a>
theme. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>I am using <a href="https://github.com/pattex/jekyll-tagging">jekyll-tagging</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>Maybe there is a more elegant way to do it. Suggestions are welcome. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="blog" /><category term="html" /><category term="css" /><category term="chatgpt" /><category term="ruby" /><category term="jekyll" /><summary type="html"><![CDATA[The first time I used ChatGPT I was astounded. Here was something that felt like magic. Since then, a lot more information has been made available about LLMs in general. Us laymen have peeked inside the magician’s hat. We know more about their capabilities and shortcomings. We know that they can hallucinate at times and that their output should be used with care. But the point still remains; what ChatGPT and the rest of the LLMs offer is awesome.]]></summary></entry><entry><title type="html">See You at the Library</title><link href="https://ckardaris.github.io/blog/2024/05/04/see-you-at-the-library.html" rel="alternate" type="text/html" title="See You at the Library" /><published>2024-05-04T00:00:00+00:00</published><updated>2024-05-04T00:00:00+00:00</updated><id>https://ckardaris.github.io/blog/2024/05/04/see-you-at-the-library</id><content type="html" xml:base="https://ckardaris.github.io/blog/2024/05/04/see-you-at-the-library.html"><![CDATA[<p>I was recently travelling again. On the first day of the trip, I had to work,
but the hostel I was staying at did not have any quiet space for that purpose.
I tried to use the common room; however, the morning cheers of vacationing
children did not provide an ideal working environment.</p>

<p>I had to evaluate my options. Many people working remotely go to cafés. They
enjoy a cup of coffee and a piece of cake and hopefully something else
later<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, until it is time to call it a day. Visiting the city for the first
time, I had no idea where to find good cafés for working. I didn’t want to
spend more time searching for a suitable place, when I should have already been
working. So, I decided to play it safe.</p>

<p>In the maps application on my phone, I entered:</p>
<blockquote>
  <p>library</p>
</blockquote>

<p>Libraries have always held a soft spot in my heart. I am a book aficionado and
love learning new stuff, so a place that contains such a variety of books and
knowledge naturally appeals to me. Despite this, I hadn’t visited a library
with the intention of spending some productive time there in nearly five years.
It was during my last year of studies. Before the whole Covid-19 adventure.</p>

<p>I scanned the map on my phone for a library within walking distance and was
satisfied that the main library of the city was only 1.5 kilometre down the
street. I packed my laptop and headed towards there.</p>

<p>The first visit to a previously unknown library is a pleasant experience for
me.  It mostly comes down to the curiosity about the arrangement of the books,
the availability of working spaces and, most importantly, the people that are
already there. I did a brief tour around. I was looking for a suitable place to
“camp”, while quickly observing the other library visitors. Some working alone,
some students on a group project, some on the public computers.</p>

<p>I soon had my spot. I unpacked my stuff and started working. I like to have my
headphones on, when working in public spaces. But I don’t want to block all
outside sounds. I like knowing that the environment around me is lively. It
gives me a sense of purpose.</p>

<p>I believe that the collective focus of people working or studying, even though
they do not interact directly with one another, has an interesting effect which
in turn makes me more focused on my work. It is what makes libraries unique.
They are not just buildings or places of public service, but a vibrant social
environment. It is also why I don’t plan to wait for five more years before my
next visit.</p>

<p>You should not wait either. If you ever need a change of scenery when working,
you know what to do. Open the maps application on your phone<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> and enter the
magic word:</p>
<blockquote>
  <p>library</p>
</blockquote>

<p>See you there.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Ordering once and staying there for multiple hours is at least rude in my
opinion. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Old-school ways of searching are not frowned upon. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="blog" /><category term="library" /><category term="life" /><category term="travel" /><category term="work" /><summary type="html"><![CDATA[I was recently travelling again. On the first day of the trip, I had to work, but the hostel I was staying at did not have any quiet space for that purpose. I tried to use the common room; however, the morning cheers of vacationing children did not provide an ideal working environment.]]></summary></entry></feed>